// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Program.cs

using KwestKarz.Entities;
using KwestKarz.Services;
using KwestKarz.Services.Configuration;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Text;

namespace KwestKarz
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();

            builder.Services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "KwestKarz API",
                    Version = "v1"
                });

                c.MapType<IFormFile>(() => new OpenApiSchema
                {
                    Type = "string",
                    Format = "binary"
                });

                var securityScheme = new OpenApiSecurityScheme
                {
                    Reference = new OpenApiReference
                    {
                        Type = ReferenceType.SecurityScheme,
                        Id = "Bearer"
                    },
                    Name = "Authorization",
                    Type = SecuritySchemeType.Http,
                    Scheme = "Bearer",
                    BearerFormat = "JWT",
                    In = ParameterLocation.Header,
                    Description = "Paste your JWT token here with Bearer prefix. Example: Bearer eyJ..."
                };

                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Name = "Authorization",
                    Type = SecuritySchemeType.Http,
                    Scheme = "Bearer",
                    BearerFormat = "JWT",
                    In = ParameterLocation.Header,
                    Description = "Paste your JWT token here with Bearer prefix. Example: Bearer eyJ..."
                });

                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    { securityScheme, Array.Empty<string>() }
                });
            });


            builder.Configuration
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                    .AddUserSecrets<Program>(optional: true)
                    .AddEnvironmentVariables();


            builder.Services.AddDbContext<KwestKarzDbContext>(options =>
                options.UseNpgsql(builder.Configuration.GetConnectionString("KwestKarzDb")));

            builder.Services.AddAuthentication("Bearer")
                .AddJwtBearer("Bearer", options =>
                {
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuer = true,
                        ValidateAudience = true,
                        ValidateLifetime = true,
                        ValidateIssuerSigningKey = true,
                        ValidIssuer = builder.Configuration["Jwt:Issuer"],
                        ValidAudience = builder.Configuration["Jwt:Audience"],
                        IssuerSigningKey = new SymmetricSecurityKey(
                            Encoding.UTF8.GetBytes(builder.Configuration["Jwt:SecretKey"]))
                    };
                });

            builder.Services.AddAuthorization(); // make sure this is also in place

            var MyAllowSpecificOrigins = "_myAllowSpecificOrigins";

            builder.Services.AddCors(options =>
            {
                options.AddPolicy(name: MyAllowSpecificOrigins,
                    policy =>
                    {
                        policy.WithOrigins("http://localhost:5173")
                              .AllowAnyHeader()
                              .AllowAnyMethod()
                              .AllowCredentials(); // If using cookies or auth headers
                    });
            });


            //////////////////////////////////////////////
            /// system service
            //////////////////////////////////////////////

            builder.Services.AddScoped<IAccountService, AccountService>();
            builder.Services.AddScoped<ITokenService, TokenService>();
            builder.Services.AddScoped<IAuthService, AuthService>();
            builder.Services.AddScoped<ITripEarningsService, TripEarningsService>();
            builder.Services.AddScoped<ICSVParserService, CSVParserService>();
            builder.Services.AddScoped<IVehicleEventService, VehicleEventService>();
            builder.Services.AddScoped<IVehicleImportService, VehicleImportService>();
            builder.Services.AddScoped<IVehicleService, VehicleService>();
            builder.Services.AddScoped<IGuestService, GuestService>();
            builder.Services.Configure<GoogleEmailSettings>(builder.Configuration.GetSection("google"));
            builder.Services.AddTransient<IEmailService, EmailService>();
            builder.Services.AddScoped<ILogService, LogService>();
            builder.Services.AddScoped<IApiKeyService,  ApiKeyService>();
            builder.Services.AddScoped<IMemoService, MemoService>();
            builder.Services.AddScoped<IPasswordHasher<UserAccount>, PasswordHasher<UserAccount>>();


            ////////////////////////////////////////////
            /// Build
            ////////////////////////////////////////////

            builder.WebHost.ConfigureKestrel(options =>
            {
                options.ListenAnyIP(5066);    // HTTP
                options.ListenAnyIP(7102, listenOptions =>
                {
                    listenOptions.UseHttps();  // HTTPS
                });
            });

            var app = builder.Build();
            app.UseMiddleware<KwestKarz.Middleware.ApiKey.ApiKeyAuthenticationMiddleware>();

            app.Use(async (context, next) =>
            {
                try
                {
                    await next();
                }
                catch (Exception ex)
                {
                    Console.WriteLine("EXCEPTION:");
                    Console.WriteLine(ex.Message);
                    throw;
                }
            });

            /////////////////////////////////////////////
            /// Database Setup
            /////////////////////////////////////////////

            using (var scope = app.Services.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetRequiredService<KwestKarzDbContext>();
                DbSeeder.SeedRoles(dbContext);
                DbSeeder.SeedAdminUser(dbContext);
            }

            app.UseAuthentication();
            app.UseAuthorization();


            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI();
                app.UseHttpsRedirection();
            }

           
            app.UseCors(MyAllowSpecificOrigins);

            app.MapControllers();

            app.Run();
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\ApiKeyAdminController.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using KwestKarz.Entities;
using KwestKarz.Services;
using Microsoft.AspNetCore.Mvc;

namespace KwestKarz.Controllers.Admin
{
    [ApiController]
    [Route("api/admin/apikeys")]
    public class ApiKeyAdminController : ControllerBase
    {
        private readonly IApiKeyService _apiKeyService;

        public ApiKeyAdminController(IApiKeyService apiKeyService)
        {
            _apiKeyService = apiKeyService;
        }

        [HttpPost]
        public async Task<IActionResult> CreateApiKey([FromBody] CreateApiKeyRequest request)
        {
            var key = await _apiKeyService.CreateKeyAsync(request.Name, request.Description, request.Roles);
            return Ok(new { key.Id, ApiKey = key.KeyHash }); // Return raw key
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var keys = await _apiKeyService.GetAllKeysAsync();
            return Ok(keys.Select(k => new
            {
                k.Id,
                k.Name,
                k.Description,
                k.DateIssued,
                k.Expires,
                k.IsActive,
                Claims = k.Claims.Select(c => c.Role.ToString())
            }));
        }

        [HttpDelete("{id:guid}")]
        public async Task<IActionResult> Deactivate(Guid id)
        {
            var success = await _apiKeyService.DeactivateKeyAsync(id);
            return success ? NoContent() : NotFound();
        }

        [HttpGet("{id:guid}/claims")]
        public async Task<IActionResult> GetClaims(Guid id)
        {
            var key = await _apiKeyService.GetKeyByIdAsync(id);
            if (key == null) return NotFound();

            return Ok(key.Claims.Select(c => c.Role.ToString()));
        }
    }

    public class CreateApiKeyRequest
    {
        public string Name { get; set; }
        public string? Description { get; set; }
        public List<ApiClientRole> Roles { get; set; } = new();
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\AuthController.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using KwestKarz.Services;
using System;
using System.Threading.Tasks;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;

namespace KwestKarz.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;
        private readonly IAccountService _accountService;

        public AuthController(IAuthService authService, IAccountService accountService)
        {
            _authService = authService;
            _accountService = accountService;
        }

        [HttpPost("login")]
        [AllowAnonymous]
        public async Task<IActionResult> Login([FromBody] LoginRequest request)
        {
            try
            {
                var token = await _authService.LoginAsync(request.UsernameOrEmail, request.Password);
                return Ok(new { token });
            }
            catch (UnauthorizedAccessException ex)
            {
                return Unauthorized(ex.Message);
            }
            catch (Exception ex)
            {
                // TEMPORARY: this gives you insight into what blew up
                return StatusCode(500, $"Login failed: {ex.Message}");
            }
        }

        [HttpPost("create-account")]
        [AllowAnonymous]
        public async Task<IActionResult> CreateAccount([FromBody] CreateUserRequest request)
        {
            try
            {
                var user = await _accountService.CreateAccountAsync(request.Email, request.Username, request.Password);
                return CreatedAtAction(nameof(UserAccountsController.GetAccountById), new { id = user.Id }, user);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }


        [HttpPost("change-password")]
        [Authorize]
        public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordRequest request)
        {
            var email = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
            Console.WriteLine("Claims received: " + string.Join(", ", User.Claims.Select(c => $"{c.Type}={c.Value}")));

            if (string.IsNullOrEmpty(email))
                return Unauthorized("Email claim not found in token.");

            try
            {
                await _authService.ChangePasswordAsync(email, request.CurrentPassword, request.NewPassword);
                return NoContent();
            }
            catch (UnauthorizedAccessException ex)
            {
                return Unauthorized(ex.Message);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPost("setup")]
        [AllowAnonymous]
        public async Task<IActionResult> CompleteAccountSetup([FromBody] CompleteAccountSetupRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.Token) ||
                string.IsNullOrWhiteSpace(request.Password))
                return BadRequest("Token and password are required.");

            try
            {
                await _accountService.CompleteAccountSetupAsync(
                    request.Token,
                    request.Password,
                    request.FirstName,
                    request.LastName
                );
                return Ok();
            }
            catch (SecurityTokenException ex)
            {
                return Unauthorized(ex.Message);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

    }

    public class CompleteAccountSetupRequest
    {
        public string Token { get; set; }
        public string Password { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\ChangePasswordRequest.cs
using System;

namespace KwestKarz.Controllers
{
    public class ChangePasswordRequest
    {
        public string CurrentPassword { get; set; }
        public string NewPassword { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\CreateUserRequest.cs
namespace KwestKarz.Controllers
{
    public class CreateUserRequest
    {
        public string Email { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\FileUploadController.cs
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using KwestKarz.Services;
using System.Threading.Tasks;

namespace KwestKarz.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class FileUploadController : ControllerBase
    {
        private readonly ITripEarningsService _tripEarningsService;

        public FileUploadController(ITripEarningsService tripEarningsService)
        {
            _tripEarningsService = tripEarningsService;
        }

        [HttpPost("trip-earnings-upload")]
        [Consumes("multipart/form-data")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UploadTripEarnings([FromForm] TripEarningsUploadRequest request)
        {
            if (request.File == null || request.File.Length == 0)
                return BadRequest("No file uploaded.");

            using var stream = request.File.OpenReadStream();
            var insertedCount = _tripEarningsService.ImportTripEarnings(stream);

            return Ok(new { message = $"Upload successful. {insertedCount} new records added." });
        }
    }

    public class TripEarningsUploadRequest
    {
        public IFormFile File { get; set; }
    }

}



// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\GuestController.cs
using KwestKarz.Entities;
using KwestKarz.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace KwestKarz.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize(Roles = "Admin,Owner")]
    public class GuestController : ControllerBase
    {
        private readonly GuestService _guestService;

        public GuestController(GuestService guestService)
        {
            _guestService = guestService;
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Guest>> GetById(int id)
        {
            var guest = await _guestService.GetGuestByIdAsync(id);
            return guest == null ? NotFound() : Ok(guest);
        }

        [HttpPost("create")]
        public async Task<ActionResult<Guest>> CreateOrGet([FromBody] Guest guest)
        {
            var result = await _guestService.GetOrCreateGuestAsync(guest);
            return Ok(result);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] Guest updatedGuest)
        {
            if (id != updatedGuest.GuestId)
                return BadRequest("Guest ID mismatch.");

            await _guestService.UpdateGuestAsync(updatedGuest);
            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            await _guestService.DeleteGuestAsync(id);
            return NoContent();
        }

        [HttpPost("{id}/trips")]
        public async Task<IActionResult> AddTrip(int id, [FromBody] Trip trip)
        {
            await _guestService.AddTripToGuestAsync(id, trip);
            return Ok();
        }

        [HttpPost("{id}/contactlog")]
        public async Task<IActionResult> AddContactLog(int id, [FromBody] ContactLog log)
        {
            await _guestService.AddContactLogAsync(id, log);
            return Ok();
        }

        [HttpPost("{id}/charges")]
        public async Task<IActionResult> AddOutstandingCharge(int id, [FromBody] OutstandingCharge charge)
        {
            await _guestService.AddOutstandingChargeAsync(id, charge);
            return Ok();
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\InviteUserRequest.cs
namespace KwestKarz.Controllers
{
    public class InviteUserRequest
    {
        public string Email { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\LoginRequest.cs
using System;

namespace KwestKarz.Controllers
{
    public class LoginRequest
    {
        public string UsernameOrEmail { get; set; }
        public string Password { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\MemoController.cs
using System;
using System.Threading.Tasks;
using KwestKarz.Entities;
using KwestKarz.Services;
using Microsoft.AspNetCore.Mvc;

namespace KwestKarz.Controllers
{
    [ApiController]
    [Route("api/gpt/memos")]
    public class MemoController : ControllerBase
    {
        private readonly IMemoService _memoService;

        public MemoController(IMemoService memoService)
        {
            _memoService = memoService;
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] Memo memo)
        {
            var saved = await _memoService.CreateMemoAsync(memo);
            return Ok(new
            {
                saved.Id,
                Status = "saved",
                saved.CreatedAt
            });
        }

        [HttpGet("upcoming")]
        public async Task<IActionResult> GetUpcoming()
        {
            var memos = await _memoService.GetUpcomingAsync();
            return Ok(memos);
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\UserAccountsController.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using KwestKarz.Entities;
using KwestKarz.Services;

namespace KwestKarz.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class UserAccountsController : ControllerBase
    {
        private readonly IAccountService _accountService;

        public UserAccountsController(IAccountService accountService)
        {
            _accountService = accountService;
        }

        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<ActionResult<List<UserAccount>>> GetAll()
        {
            var users = await _accountService.GetAllAccounts();
            return Ok(users);
        }


        [HttpGet("{id}")]
        [Authorize(Roles = "Admin")]

        public async Task<ActionResult<UserAccount>> GetAccountById(Guid id)
        {
            var user = await _accountService.GetAccountByIdAsync(id);
            if (user == null)
                return NotFound();

            return Ok(user);
        }

        [HttpPost("{id}/disable")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DisableAccount(Guid id)
        {
            await _accountService.DisableAccountAsync(id);
            return NoContent();
        }

        [HttpPost("{id}/enable")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> EnableAccount(Guid id)
        {
            await _accountService.EnableAccountAsync(id);
            return NoContent();
        }


        [HttpPost("invite")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> InviteUser([FromBody] InviteUserRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.Email))
                return BadRequest("Email is required.");

            await _accountService.InviteUserAsync(request.Email);
            return Ok();
        }


    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\VehicleController.cs
using KwestKarz.Entities;
using KwestKarz.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace KwestKarz.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize(Roles = "Admin,Owner")]
    public class VehicleController : ControllerBase
    {
        private readonly IVehicleService _vehicleService;

        public VehicleController(IVehicleService vehicleService)
        {
            _vehicleService = vehicleService;
        }

        [HttpGet]
        public async Task<ActionResult<List<Vehicle>>> GetAll()
        {
            var vehicles = await _vehicleService.GetAllAsync();
            return Ok(vehicles);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Vehicle>> GetById(Guid id)
        {
            var vehicle = await _vehicleService.GetByIdAsync(id);
            if (vehicle == null)
                return NotFound();

            return Ok(vehicle);
        }

        [HttpPost]
        public async Task<ActionResult<Vehicle>> Create(Vehicle vehicle)
        {
            var created = await _vehicleService.CreateAsync(vehicle);
            return CreatedAtAction(nameof(GetById), new { id = created.Id }, created);
        }

        [HttpPut("{id}")]
        public async Task<ActionResult<Vehicle>> Update(Guid id, Vehicle vehicle)
        {
            if (id != vehicle.Id)
                return BadRequest("ID mismatch");

            var existing = await _vehicleService.GetByIdAsync(id);
            if (existing == null)
                return NotFound();

            await _vehicleService.UpdateAsync(vehicle);
            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            var existing = await _vehicleService.GetByIdAsync(id);
            if (existing == null)
                return NotFound();

            await _vehicleService.DeleteAsync(id);
            return NoContent();
        }

        [HttpPost("import")]
        [Consumes("multipart/form-data")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> ImportVehicles([FromServices] IVehicleImportService importService, [FromForm] VehicleImportRequest request)
        {
            if (request.File == null || request.File.Length == 0)
                return BadRequest("No file uploaded.");

            using var stream = request.File.OpenReadStream();
            var count = await importService.ImportVehiclesAsync(stream);

            return Ok(new { message = $"Import successful. {count} vehicles added." });
        }

    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\VehicleEventsController.cs
using KwestKarz.Entities;
using KwestKarz.Entities.Maintenance;
using KwestKarz.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace KwestKarz.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize(Roles = "Admin,Owner,Maintenance")]
    public class VehicleEventsController : ControllerBase
    {
        private readonly IVehicleEventService _eventService;

        public VehicleEventsController(IVehicleEventService eventService)
        {
            _eventService = eventService;
        }

        [HttpGet("vehicle/{vehicleId}")]
        public async Task<ActionResult<List<VehicleEvent>>> GetEventsForVehicle(Guid vehicleId)
        {
            var events = await _eventService.GetEventsForVehicleAsync(vehicleId);
            return Ok(events);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<VehicleEvent>> GetEventById(Guid id)
        {
            var ev = await _eventService.GetEventByIdAsync(id);
            if (ev == null)
                return NotFound();

            return Ok(ev);
        }

        [HttpPost("maintenance")]
        public async Task<IActionResult> AddMaintenance([FromBody] MaintenanceEntry entry)
        {
            await _eventService.AddEventAsync(entry);
            return Ok(entry);
        }

        [HttpPost("inspection")]
        public async Task<IActionResult> AddInspection([FromBody] InspectionEntry entry)
        {
            await _eventService.AddEventAsync(entry);
            return Ok(entry);
        }

        [HttpPost("incident")]
        public async Task<IActionResult> AddIncident([FromBody] IncidentReport entry)
        {
            await _eventService.AddEventAsync(entry);
            return Ok(entry);
        }

        [HttpPost("repair")]
        public async Task<IActionResult> AddRepair([FromBody] RepairEntry entry)
        {
            await _eventService.AddEventAsync(entry);
            return Ok(entry);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            await _eventService.DeleteEventAsync(id);
            return NoContent();
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Controllers\VehicleImportRequest.cs
namespace KwestKarz.Controllers
{
    public class VehicleImportRequest
    {
        public IFormFile File { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\ApiClientClaim.cs
using System;

namespace KwestKarz.Entities
{
    public class ApiClientClaim
    {
        public int Id { get; set; }
        public ApiClientRole Role { get; set; }

        public Guid ApiClientKeyId { get; set; }
        public ApiClientKey ApiClientKey { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\ApiClientKey.cs
using System;
using System.Collections.Generic;

namespace KwestKarz.Entities
{
    public class ApiClientKey
    {
        public Guid Id { get; set; }
        public string Name { get; set; }                     // Application name
        public string KeyHash { get; set; }                  // Store hashed key
        public string? Description { get; set; }
        public DateTime DateIssued { get; set; } = DateTime.UtcNow;
        public DateTime? Expires { get; set; }
        public bool IsActive { get; set; } = true;
        public DateTime? LastUsed { get; set; }

        public List<ApiClientClaim> Claims { get; set; } = new();
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\ApiClientRole.cs
namespace KwestKarz.Entities
{
    public enum ApiClientRole
    {
        General,
        Finance,
        Maintenance,
        Technical
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\ContactLog.cs
using System;
using System.ComponentModel.DataAnnotations;

namespace KwestKarz.Entities
{
    public class ContactLog
    {
        [Key]
        public int LogId { get; set; }

        public int GuestId { get; set; }

        public string ContactType { get; set; }
        public DateTime Timestamp { get; set; }
        public string Notes { get; set; }

        public Guest Guest { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\Guest.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace KwestKarz.Entities
{
    public class Guest
    {
        [Key]
        public int GuestId { get; set; }

        [Required]
        public string FullName { get; set; }

        public string Email { get; set; }
        public string Phone { get; set; }
        public string TuroUsername { get; set; }

        [Range(1, 5)]
        public int? InternalRating { get; set; }

        public bool IsVIP { get; set; }
        public DateTime DateAdded { get; set; } = DateTime.UtcNow;

        public ICollection<Trip> Trips { get; set; }
        public ICollection<OutstandingCharge> OutstandingCharges { get; set; }
        public ICollection<ContactLog> ContactLogs { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\IncidentReport.cs
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using KwestKarz.Entities;

namespace KwestKarz.Entities.Maintenance
{
    public class IncidentReport : VehicleEvent
    {
        [Required]
        [MaxLength(500)]
        public string Description { get; set; }

        [MaxLength(50)]
        public string Severity { get; set; } // e.g., "Minor", "Major", "Critical"

        public bool ReportedToTuro { get; set; }

        [MaxLength(100)]
        public string ClaimId { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\InspectionEntry.cs
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using KwestKarz.Entities;

namespace KwestKarz.Entities.Maintenance
{
    public class InspectionEntry : VehicleEvent
    {
        [Required]
        [MaxLength(100)]
        public string Inspector { get; set; }

        [Required]
        [MaxLength(20)]
        public string Result { get; set; } // e.g., "Pass", "Fail"

        [MaxLength(100)]
        public string InspectionType { get; set; } // e.g., "State Safety", "Pre-Trip", "Annual"
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\KwestKarzDbContext.cs
using KwestKarz.Entities;
using KwestKarz.Entities.Maintenance;
using Microsoft.EntityFrameworkCore;

namespace KwestKarz.Entities
{
    public class KwestKarzDbContext : DbContext
    {
        public KwestKarzDbContext(DbContextOptions<KwestKarzDbContext> options)
            : base(options)
        {
        }

        public DbSet<UserAccount> UserAccounts { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<Vehicle> Vehicles { get; set; }
        public DbSet<LogEntry> LogEntries { get; set; }
        public DbSet<TripEarnings> TripEarnings { get; set; }

        public DbSet<VehicleEvent> VehicleEvents { get; set; }

        // CRM Entities
        public DbSet<Guest> Guests { get; set; }
        public DbSet<Trip> Trips { get; set; }
        public DbSet<OutstandingCharge> OutstandingCharges { get; set; }
        public DbSet<ContactLog> ContactLogs { get; set; }

        public DbSet<TechLog> TechLogs { get; set; }

        public DbSet<ApiClientKey> ApiClientKeys { get; set; }
        public DbSet<ApiClientClaim> ApiClientClaims { get; set; }

        public DbSet<Memo> Memos { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            var configuration = new ConfigurationBuilder()
                .SetBasePath(AppContext.BaseDirectory)
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddUserSecrets<Program>()
                .AddEnvironmentVariables()
                .Build();

            optionsBuilder.UseNpgsql(configuration.GetConnectionString("KwestKarzDb"));
        }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasDefaultSchema("kwestkarzbusinessdata");

            modelBuilder.Entity<VehicleEvent>()
                .HasDiscriminator<string>("EventType")
                .HasValue<MaintenanceEntry>("Maintenance")
                .HasValue<InspectionEntry>("Inspection")
                .HasValue<IncidentReport>("Incident")
                .HasValue<RepairEntry>("Repair");

            modelBuilder.Entity<ApiClientClaim>()
                .HasOne(c => c.ApiClientKey)
                .WithMany(k => k.Claims)
                .HasForeignKey(c => c.ApiClientKeyId);


            // Optional: Fluent configuration for CRM entities could go here later
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\LogEntry.cs
using System;
using System.Security.Cryptography;
using System.Text;
using Newtonsoft.Json;

namespace KwestKarz.Entities
{
    public class LogEntry
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;
        public string Action { get; set; }
        public string Result { get; set; }
        public string Account { get; set; } // email or userId
        public string Category { get; set; } // e.g., "Auth", "Procedure", "Task"
        public string Type { get; set; } // e.g., "Success", "Failure"

        public string PreviousHash { get; set; }
        public string Hash { get; private set; }

        public void ComputeHash(string previousHash)
        {
            PreviousHash = previousHash;
            Hash = GenerateHash(previousHash);
        }

        public bool ValidateHash()
        {
            var expectedHash = GenerateHash(PreviousHash);
            return Hash == expectedHash;
        }

        private string GenerateHash(string previousHash)
        {
            var payload = new
            {
                Id,
                Timestamp,
                Action,
                Result,
                Account,
                Category,
                Type,
                PreviousHash = previousHash
            };

            var json = JsonConvert.SerializeObject(payload);
            using (var sha256 = SHA256.Create())
            {
                var bytes = Encoding.UTF8.GetBytes(json);
                var hashBytes = sha256.ComputeHash(bytes);
                return Convert.ToHexString(hashBytes);
            }
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\MaintenanceEntry.cs
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using KwestKarz.Entities;

namespace KwestKarz.Entities.Maintenance
{
    public class MaintenanceEntry : VehicleEvent
    {
        [Required]
        [MaxLength(100)]
        public string ServiceType { get; set; } // e.g., "Oil Change", "Brake Pads", "Battery"

        [Column(TypeName = "decimal(18,2)")]
        public decimal Cost { get; set; }

        [MaxLength(100)]
        public string PerformedBy { get; set; } // Vendor, technician, or internal
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\Memo.cs
using System;
using System.Collections.Generic;

namespace KwestKarz.Entities
{
    public class Memo
    {
        public int Id { get; set; }
        public MemoType Type { get; set; } = MemoType.Thought;
        public string Text { get; set; }
        public DateTime? Timestamp { get; set; }
        public List<string> Tags { get; set; } = new();
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\MemoType.cs
namespace KwestKarz.Entities
{
    public enum MemoType
    {
        Reminder,
        Directive,
        Thought,
        LogEntry,
        Insight,
        Scratch,
        PromptLog
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\OutstandingCharge.cs
using System;
using System.ComponentModel.DataAnnotations;

namespace KwestKarz.Entities
{
    public class OutstandingCharge
    {
        [Key]
        public int ChargeId { get; set; }

        [Required]
        public int GuestId { get; set; }
        public int? TripId { get; set; }

        [Required]
        public string ChargeType { get; set; }

        [Required]
        public decimal Amount { get; set; }

        [Required]
        public string Status { get; set; }

        public DateTime DateIncurred { get; set; }
        public DateTime? DateResolved { get; set; }

        public Guest Guest { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\RepairEntry.cs
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using KwestKarz.Entities;

namespace KwestKarz.Entities.Maintenance
{
    public class RepairEntry : VehicleEvent
    {
        [Required]
        [MaxLength(100)]
        public string ComponentAffected { get; set; }

        [MaxLength(100)]
        public string RepairType { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal Cost { get; set; }

        [MaxLength(100)]
        public string ShopName { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\Role.cs
using System.ComponentModel.DataAnnotations;

namespace KwestKarz.Entities
{
    public class Role
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        [MaxLength(100)]
        public string Name { get; set; }

        public ICollection<UserRole> Users { get; set; } = new List<UserRole>();
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\TechLog.cs
using System;

namespace KwestKarz.Entities
{
    public enum TechLogLevel
    {
        Trace,
        Debug,
        Information,
        Warning,
        Error,
        Exception,
        Other
    }

    public class TechLog
    {
        public int Id { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;
        public TechLogLevel Level { get; set; }
        public string Source { get; set; }  // filled by service, optionally overridden
        public string Message { get; set; }
        public string? Detail { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\Trip.cs
using System;
using System.ComponentModel.DataAnnotations;

namespace KwestKarz.Entities
{
    public class Trip
    {
        [Key]
        public int TripId { get; set; }

        [Required]
        public int GuestId { get; set; }

        [Required]
        public int VehicleId { get; set; }

        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public decimal Earnings { get; set; }
        public int MilesDriven { get; set; }

        public bool LateReturn { get; set; }
        public bool DamageReported { get; set; }
        public bool TollFlag { get; set; }

        public string Notes { get; set; }

        public Guest Guest { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\TripEarnings.cs
using CsvHelper.Configuration.Attributes;
using System;
using System.ComponentModel.DataAnnotations;

namespace KwestKarz.Entities
{
    public class TripEarnings
    {
        [Key]
        [Name("Reservation ID")]
        public string ReservationID { get; set; }

        public string? Guest { get; set; }
        public string? Vehicle { get; set; }

        [Name("Vehicle name")]
        public string? VehicleName { get; set; }
        public DateTime? TripStart { get; set; }
        public DateTime? TripEnd { get; set; }
        public string? PickupLocation { get; set; }
        public string? ReturnLocation { get; set; }
        public string? TripStatus { get; set; }
        public decimal? TotalEarnings { get; set; }

        public DateTime ImportedAt { get; set; }
        public string RowHash { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\UserAccount.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace KwestKarz.Entities
{
    public class UserAccount
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        [MaxLength(100)]
        public string Username { get; set; }

        [Required]
        [MaxLength(256)]
        public string Email { get; set; }

        [Required]
        [MaxLength(256)]
        [JsonIgnore]
        public string PasswordHash { get; set; }

        public bool IsActive { get; set; }

        public bool RequiresPasswordReset { get; set; } = false;

        public ICollection<UserRole> Roles { get; set; } = new List<UserRole>();

        [MaxLength(100)]
        public string? FirstName { get; set; }

        [MaxLength(100)]
        public string? LastName { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\UserRole.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace KwestKarz.Entities
{
    public class UserRole
    {
        [Key]
        public Guid Id { get; set; }

        [ForeignKey("UserAccount")]
        public Guid UserAccountId { get; set; }

        public UserAccount UserAccount { get; set; }

        [ForeignKey("Role")]
        public Guid RoleId { get; set; }

        public Role Role { get; set; }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\Vehicle.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace KwestKarz.Entities
{
    public class Vehicle
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        [MaxLength(100)]
        public string Name { get; set; }

        [Required]
        [MaxLength(100)]
        public string Make { get; set; }

        [Required]
        [MaxLength(100)]
        public string Model { get; set; }

        [Required]
        [Range(1886, 2100)] // The first car was invented in 1886 :)
        public int Year { get; set; }

        [Required]
        [MaxLength(100)]
        public string Color { get; set; }

        [MaxLength(50)]
        public string PaintCode { get; set; }

        [MaxLength(100)]
        public string Package { get; set; }

        [Required]
        [StringLength(17, MinimumLength = 17, ErrorMessage = "VIN must be exactly 17 characters.")]
        public string VIN { get; set; }

        [Required]
        [MaxLength(20)]
        public string LicensePlateNumber { get; set; }

        public DateTime? PurchaseDate { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? PurchasePrice { get; set; }

    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Entities\VehicleEvent.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace KwestKarz.Entities
{
    public abstract class VehicleEvent
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        [ForeignKey("Vehicle")]
        public Guid VehicleId { get; set; }
        public Vehicle Vehicle { get; set; }

        [Required]
        public DateTime Date { get; set; }

        public int? Odometer { get; set; }

        [MaxLength(500)]
        public string Notes { get; set; }

        [MaxLength(100)]
        public string CreatedBy { get; set; } // optional: user, admin, automation
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Middleware\ApiKey\ApiKeyAuthenticationMiddlewareClass.cs
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using KwestKarz.Services;
using Microsoft.AspNetCore.Http;

namespace KwestKarz.Middleware.ApiKey
{
    public class ApiKeyAuthenticationMiddleware
    {
        private readonly RequestDelegate _next;

        public ApiKeyAuthenticationMiddleware(RequestDelegate next)
        {
            _next = next;
        }

        public async Task InvokeAsync(HttpContext context, IApiKeyService apiKeyService)
        {
            var path = context.Request.Path.Value;
            if (path != null && path.StartsWith("/api/gpt"))
            {
                if (!context.Request.Headers.TryGetValue("Authorization", out var authHeader) ||
                    !authHeader.ToString().StartsWith("Bearer "))
                {
                    context.Response.StatusCode = StatusCodes.Status401Unauthorized;
                    await context.Response.WriteAsync("Missing or invalid API key");
                    return;
                }

                var token = authHeader.ToString().Substring("Bearer ".Length).Trim();
                var key = await apiKeyService.ValidateKeyAsync(token);
                if (key == null)
                {
                    context.Response.StatusCode = StatusCodes.Status403Forbidden;
                    await context.Response.WriteAsync("Invalid or inactive API key");
                    return;
                }

                var claims = key.Claims.Select(c => new Claim(ClaimTypes.Role, c.Role.ToString()));
                var identity = new ClaimsIdentity(claims, "ApiKey");
                var principal = new ClaimsPrincipal(identity);
                context.User = principal;
            }

            await _next(context);
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250414001355_Init.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class Init : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250414001355_Init.Designer.cs
// <auto-generated />
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250414001355_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250414002113_Init2.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class Init2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "kwestkarzbusinessdata");

            migrationBuilder.CreateTable(
                name: "Roles",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserAccounts",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Username = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Email = table.Column<string>(type: "character varying(256)", maxLength: 256, nullable: false),
                    PasswordHash = table.Column<string>(type: "character varying(256)", maxLength: 256, nullable: false),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserAccounts", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserRoles",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    UserAccountId = table.Column<Guid>(type: "uuid", nullable: false),
                    RoleId = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserRoles", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserRoles_Roles_RoleId",
                        column: x => x.RoleId,
                        principalSchema: "kwestkarzbusinessdata",
                        principalTable: "Roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserRoles_UserAccounts_UserAccountId",
                        column: x => x.UserAccountId,
                        principalSchema: "kwestkarzbusinessdata",
                        principalTable: "UserAccounts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_UserRoles_RoleId",
                schema: "kwestkarzbusinessdata",
                table: "UserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "IX_UserRoles_UserAccountId",
                schema: "kwestkarzbusinessdata",
                table: "UserRoles",
                column: "UserAccountId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "UserRoles",
                schema: "kwestkarzbusinessdata");

            migrationBuilder.DropTable(
                name: "Roles",
                schema: "kwestkarzbusinessdata");

            migrationBuilder.DropTable(
                name: "UserAccounts",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250414002113_Init2.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250414002113_Init2")]
    partial class Init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250414182044_useraccount.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class useraccount : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<bool>(
                name: "RequiresPasswordReset",
                schema: "kwestkarzbusinessdata",
                table: "UserAccounts",
                type: "boolean",
                nullable: false,
                defaultValue: false);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "RequiresPasswordReset",
                schema: "kwestkarzbusinessdata",
                table: "UserAccounts");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250414182044_useraccount.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250414182044_useraccount")]
    partial class useraccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250502203915_vehicles.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class vehicles : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Vehicles",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Make = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Model = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Year = table.Column<int>(type: "integer", nullable: false),
                    Color = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    PaintCode = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    Package = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    VIN = table.Column<string>(type: "character varying(17)", maxLength: 17, nullable: false),
                    LicensePlateNumber = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vehicles", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Vehicles",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250502203915_vehicles.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250502203915_vehicles")]
    partial class vehicles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250503010924_log entry block chain.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class logentryblockchain : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "LogEntries",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Timestamp = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Action = table.Column<string>(type: "text", nullable: false),
                    Result = table.Column<string>(type: "text", nullable: false),
                    Account = table.Column<string>(type: "text", nullable: false),
                    Category = table.Column<string>(type: "text", nullable: false),
                    Type = table.Column<string>(type: "text", nullable: false),
                    PreviousHash = table.Column<string>(type: "text", nullable: false),
                    Hash = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogEntries", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "LogEntries",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250503010924_log entry block chain.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250503010924_log entry block chain")]
    partial class logentryblockchain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250503231212_csv impport and earnings.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class csvimpportandearnings : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "TripEarnings",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    ReservationID = table.Column<string>(type: "text", nullable: false),
                    Guest = table.Column<string>(type: "text", nullable: false),
                    Vehicle = table.Column<string>(type: "text", nullable: false),
                    VehicleName = table.Column<string>(type: "text", nullable: false),
                    TripStart = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    TripEnd = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    PickupLocation = table.Column<string>(type: "text", nullable: false),
                    ReturnLocation = table.Column<string>(type: "text", nullable: false),
                    TripStatus = table.Column<string>(type: "text", nullable: false),
                    TotalEarnings = table.Column<decimal>(type: "numeric", nullable: true),
                    ImportedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    RowHash = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TripEarnings", x => x.ReservationID);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "TripEarnings",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250503231212_csv impport and earnings.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250503231212_csv impport and earnings")]
    partial class csvimpportandearnings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250504015135_csv impport and earnings nulls added.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class csvimpportandearningsnullsadded : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "VehicleName",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<string>(
                name: "Vehicle",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<string>(
                name: "TripStatus",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<DateTime>(
                name: "TripStart",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "timestamp with time zone",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "timestamp with time zone");

            migrationBuilder.AlterColumn<DateTime>(
                name: "TripEnd",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "timestamp with time zone",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "timestamp with time zone");

            migrationBuilder.AlterColumn<string>(
                name: "ReturnLocation",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<string>(
                name: "PickupLocation",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<string>(
                name: "Guest",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "text");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "VehicleName",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "text",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "Vehicle",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "text",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "TripStatus",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "text",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "TripStart",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "timestamp with time zone",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                oldClrType: typeof(DateTime),
                oldType: "timestamp with time zone",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "TripEnd",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "timestamp with time zone",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                oldClrType: typeof(DateTime),
                oldType: "timestamp with time zone",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "ReturnLocation",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "text",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "PickupLocation",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "text",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "Guest",
                schema: "kwestkarzbusinessdata",
                table: "TripEarnings",
                type: "text",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "text",
                oldNullable: true);
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250504015135_csv impport and earnings nulls added.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250504015135_csv impport and earnings nulls added")]
    partial class csvimpportandearningsnullsadded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250514202705_added fields for vehicle purchase date and price.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class addedfieldsforvehiclepurchasedateandprice : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<DateTime>(
                name: "PurchaseDate",
                schema: "kwestkarzbusinessdata",
                table: "Vehicles",
                type: "timestamp with time zone",
                nullable: true);

            migrationBuilder.AddColumn<decimal>(
                name: "PurchasePrice",
                schema: "kwestkarzbusinessdata",
                table: "Vehicles",
                type: "numeric(18,2)",
                nullable: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "PurchaseDate",
                schema: "kwestkarzbusinessdata",
                table: "Vehicles");

            migrationBuilder.DropColumn(
                name: "PurchasePrice",
                schema: "kwestkarzbusinessdata",
                table: "Vehicles");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250514202705_added fields for vehicle purchase date and price.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250514202705_added fields for vehicle purchase date and price")]
    partial class addedfieldsforvehiclepurchasedateandprice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250514203429_added vehiclke event tables.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class addedvehiclkeeventtables : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "VehicleEvents",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    VehicleId = table.Column<Guid>(type: "uuid", nullable: false),
                    Date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Odometer = table.Column<int>(type: "integer", nullable: true),
                    Notes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                    CreatedBy = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    EventType = table.Column<string>(type: "character varying(13)", maxLength: 13, nullable: false),
                    Inspector = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Result = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    InspectionType = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    ServiceType = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Cost = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    PerformedBy = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleEvents", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleEvents_Vehicles_VehicleId",
                        column: x => x.VehicleId,
                        principalSchema: "kwestkarzbusinessdata",
                        principalTable: "Vehicles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_VehicleEvents_VehicleId",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                column: "VehicleId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "VehicleEvents",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250514203429_added vehiclke event tables.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250514203429_added vehiclke event tables")]
    partial class addedvehiclkeeventtables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250514204130_AddVehicleEventTypes.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class AddVehicleEventTypes : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "ClaimId",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                type: "character varying(100)",
                maxLength: 100,
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "ComponentAffected",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                type: "character varying(100)",
                maxLength: 100,
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "Description",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                type: "character varying(500)",
                maxLength: 500,
                nullable: true);

            migrationBuilder.AddColumn<decimal>(
                name: "MaintenanceEntry_Cost",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                type: "numeric(18,2)",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "RepairType",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                type: "character varying(100)",
                maxLength: 100,
                nullable: true);

            migrationBuilder.AddColumn<bool>(
                name: "ReportedToTuro",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                type: "boolean",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "Severity",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                type: "character varying(50)",
                maxLength: 50,
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "ShopName",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents",
                type: "character varying(100)",
                maxLength: 100,
                nullable: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ClaimId",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents");

            migrationBuilder.DropColumn(
                name: "ComponentAffected",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents");

            migrationBuilder.DropColumn(
                name: "Description",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents");

            migrationBuilder.DropColumn(
                name: "MaintenanceEntry_Cost",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents");

            migrationBuilder.DropColumn(
                name: "RepairType",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents");

            migrationBuilder.DropColumn(
                name: "ReportedToTuro",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents");

            migrationBuilder.DropColumn(
                name: "Severity",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents");

            migrationBuilder.DropColumn(
                name: "ShopName",
                schema: "kwestkarzbusinessdata",
                table: "VehicleEvents");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250514204130_AddVehicleEventTypes.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250514204130_AddVehicleEventTypes")]
    partial class AddVehicleEventTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.IncidentReport", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReportedToTuro")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Incident");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata", t =>
                        {
                            t.Property("Cost")
                                .HasColumnName("MaintenanceEntry_Cost");
                        });

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.RepairEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ComponentAffected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250528212731_AddCrmEntities.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class AddCrmEntities : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Guests",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    GuestId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    FullName = table.Column<string>(type: "text", nullable: false),
                    Email = table.Column<string>(type: "text", nullable: false),
                    Phone = table.Column<string>(type: "text", nullable: false),
                    TuroUsername = table.Column<string>(type: "text", nullable: false),
                    InternalRating = table.Column<int>(type: "integer", nullable: true),
                    IsVIP = table.Column<bool>(type: "boolean", nullable: false),
                    DateAdded = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Guests", x => x.GuestId);
                });

            migrationBuilder.CreateTable(
                name: "ContactLogs",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    LogId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    GuestId = table.Column<int>(type: "integer", nullable: false),
                    ContactType = table.Column<string>(type: "text", nullable: false),
                    Timestamp = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Notes = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactLogs", x => x.LogId);
                    table.ForeignKey(
                        name: "FK_ContactLogs_Guests_GuestId",
                        column: x => x.GuestId,
                        principalSchema: "kwestkarzbusinessdata",
                        principalTable: "Guests",
                        principalColumn: "GuestId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OutstandingCharges",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    ChargeId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    GuestId = table.Column<int>(type: "integer", nullable: false),
                    TripId = table.Column<int>(type: "integer", nullable: true),
                    ChargeType = table.Column<string>(type: "text", nullable: false),
                    Amount = table.Column<decimal>(type: "numeric", nullable: false),
                    Status = table.Column<string>(type: "text", nullable: false),
                    DateIncurred = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DateResolved = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OutstandingCharges", x => x.ChargeId);
                    table.ForeignKey(
                        name: "FK_OutstandingCharges_Guests_GuestId",
                        column: x => x.GuestId,
                        principalSchema: "kwestkarzbusinessdata",
                        principalTable: "Guests",
                        principalColumn: "GuestId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Trips",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    TripId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    GuestId = table.Column<int>(type: "integer", nullable: false),
                    VehicleId = table.Column<int>(type: "integer", nullable: false),
                    StartDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    EndDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Earnings = table.Column<decimal>(type: "numeric", nullable: false),
                    MilesDriven = table.Column<int>(type: "integer", nullable: false),
                    LateReturn = table.Column<bool>(type: "boolean", nullable: false),
                    DamageReported = table.Column<bool>(type: "boolean", nullable: false),
                    TollFlag = table.Column<bool>(type: "boolean", nullable: false),
                    Notes = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Trips", x => x.TripId);
                    table.ForeignKey(
                        name: "FK_Trips_Guests_GuestId",
                        column: x => x.GuestId,
                        principalSchema: "kwestkarzbusinessdata",
                        principalTable: "Guests",
                        principalColumn: "GuestId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_ContactLogs_GuestId",
                schema: "kwestkarzbusinessdata",
                table: "ContactLogs",
                column: "GuestId");

            migrationBuilder.CreateIndex(
                name: "IX_OutstandingCharges_GuestId",
                schema: "kwestkarzbusinessdata",
                table: "OutstandingCharges",
                column: "GuestId");

            migrationBuilder.CreateIndex(
                name: "IX_Trips_GuestId",
                schema: "kwestkarzbusinessdata",
                table: "Trips",
                column: "GuestId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ContactLogs",
                schema: "kwestkarzbusinessdata");

            migrationBuilder.DropTable(
                name: "OutstandingCharges",
                schema: "kwestkarzbusinessdata");

            migrationBuilder.DropTable(
                name: "Trips",
                schema: "kwestkarzbusinessdata");

            migrationBuilder.DropTable(
                name: "Guests",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250528212731_AddCrmEntities.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250528212731_AddCrmEntities")]
    partial class AddCrmEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("GuestId");

                    b.ToTable("ContactLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuestId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InternalRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TuroUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GuestId");

                    b.ToTable("Guests", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChargeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIncurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TripId")
                        .HasColumnType("integer");

                    b.HasKey("ChargeId");

                    b.HasIndex("GuestId");

                    b.ToTable("OutstandingCharges", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripId"));

                    b.Property<bool>("DamageReported")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Earnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<bool>("LateReturn")
                        .HasColumnType("boolean");

                    b.Property<int>("MilesDriven")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TollFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("TripId");

                    b.HasIndex("GuestId");

                    b.ToTable("Trips", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.IncidentReport", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReportedToTuro")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Incident");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata", t =>
                        {
                            t.Property("Cost")
                                .HasColumnName("MaintenanceEntry_Cost");
                        });

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.RepairEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ComponentAffected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("ContactLogs")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("OutstandingCharges")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("Trips")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Navigation("ContactLogs");

                    b.Navigation("OutstandingCharges");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250601215855_logentry.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class logentry : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "TechLogs",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Timestamp = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Level = table.Column<int>(type: "integer", nullable: false),
                    Source = table.Column<string>(type: "text", nullable: false),
                    Message = table.Column<string>(type: "text", nullable: false),
                    Detail = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TechLogs", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "TechLogs",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250601215855_logentry.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250601215855_logentry")]
    partial class logentry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("GuestId");

                    b.ToTable("ContactLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuestId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InternalRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TuroUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GuestId");

                    b.ToTable("Guests", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChargeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIncurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TripId")
                        .HasColumnType("integer");

                    b.HasKey("ChargeId");

                    b.HasIndex("GuestId");

                    b.ToTable("OutstandingCharges", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TechLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TechLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripId"));

                    b.Property<bool>("DamageReported")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Earnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<bool>("LateReturn")
                        .HasColumnType("boolean");

                    b.Property<int>("MilesDriven")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TollFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("TripId");

                    b.HasIndex("GuestId");

                    b.ToTable("Trips", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.IncidentReport", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReportedToTuro")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Incident");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata", t =>
                        {
                            t.Property("Cost")
                                .HasColumnName("MaintenanceEntry_Cost");
                        });

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.RepairEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ComponentAffected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("ContactLogs")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("OutstandingCharges")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("Trips")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Navigation("ContactLogs");

                    b.Navigation("OutstandingCharges");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250603034924_apikeystore.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class apikeystore : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "ApiClientKeys",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "text", nullable: false),
                    KeyHash = table.Column<string>(type: "text", nullable: false),
                    Description = table.Column<string>(type: "text", nullable: true),
                    DateIssued = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Expires = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false),
                    LastUsed = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApiClientKeys", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ApiClientClaims",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Role = table.Column<int>(type: "integer", nullable: false),
                    ApiClientKeyId = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApiClientClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApiClientClaims_ApiClientKeys_ApiClientKeyId",
                        column: x => x.ApiClientKeyId,
                        principalSchema: "kwestkarzbusinessdata",
                        principalTable: "ApiClientKeys",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_ApiClientClaims_ApiClientKeyId",
                schema: "kwestkarzbusinessdata",
                table: "ApiClientClaims",
                column: "ApiClientKeyId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ApiClientClaims",
                schema: "kwestkarzbusinessdata");

            migrationBuilder.DropTable(
                name: "ApiClientKeys",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250603034924_apikeystore.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250603034924_apikeystore")]
    partial class apikeystore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiClientKeyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiClientKeyId");

                    b.ToTable("ApiClientClaims", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiClientKeys", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("GuestId");

                    b.ToTable("ContactLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuestId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InternalRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TuroUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GuestId");

                    b.ToTable("Guests", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChargeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIncurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TripId")
                        .HasColumnType("integer");

                    b.HasKey("ChargeId");

                    b.HasIndex("GuestId");

                    b.ToTable("OutstandingCharges", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TechLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TechLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripId"));

                    b.Property<bool>("DamageReported")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Earnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<bool>("LateReturn")
                        .HasColumnType("boolean");

                    b.Property<int>("MilesDriven")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TollFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("TripId");

                    b.HasIndex("GuestId");

                    b.ToTable("Trips", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.IncidentReport", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReportedToTuro")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Incident");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata", t =>
                        {
                            t.Property("Cost")
                                .HasColumnName("MaintenanceEntry_Cost");
                        });

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.RepairEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ComponentAffected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.HasOne("KwestKarz.Entities.ApiClientKey", "ApiClientKey")
                        .WithMany("Claims")
                        .HasForeignKey("ApiClientKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiClientKey");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("ContactLogs")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("OutstandingCharges")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("Trips")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Navigation("ContactLogs");

                    b.Navigation("OutstandingCharges");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250603041623_added_memo.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class added_memo : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250603041623_added_memo.Designer.cs
// <auto-generated />
using System;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250603041623_added_memo")]
    partial class added_memo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiClientKeyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiClientKeyId");

                    b.ToTable("ApiClientClaims", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiClientKeys", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("GuestId");

                    b.ToTable("ContactLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuestId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InternalRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TuroUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GuestId");

                    b.ToTable("Guests", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChargeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIncurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TripId")
                        .HasColumnType("integer");

                    b.HasKey("ChargeId");

                    b.HasIndex("GuestId");

                    b.ToTable("OutstandingCharges", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TechLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TechLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripId"));

                    b.Property<bool>("DamageReported")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Earnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<bool>("LateReturn")
                        .HasColumnType("boolean");

                    b.Property<int>("MilesDriven")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TollFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("TripId");

                    b.HasIndex("GuestId");

                    b.ToTable("Trips", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.IncidentReport", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReportedToTuro")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Incident");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata", t =>
                        {
                            t.Property("Cost")
                                .HasColumnName("MaintenanceEntry_Cost");
                        });

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.RepairEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ComponentAffected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.HasOne("KwestKarz.Entities.ApiClientKey", "ApiClientKey")
                        .WithMany("Claims")
                        .HasForeignKey("ApiClientKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiClientKey");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("ContactLogs")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("OutstandingCharges")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("Trips")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Navigation("ContactLogs");

                    b.Navigation("OutstandingCharges");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250603231551_memo.cs
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class memo : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Memos",
                schema: "kwestkarzbusinessdata",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Type = table.Column<int>(type: "integer", nullable: false),
                    Text = table.Column<string>(type: "text", nullable: false),
                    Timestamp = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Tags = table.Column<List<string>>(type: "text[]", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Memos", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Memos",
                schema: "kwestkarzbusinessdata");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250603231551_memo.Designer.cs
// <auto-generated />
using System;
using System.Collections.Generic;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250603231551_memo")]
    partial class memo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiClientKeyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiClientKeyId");

                    b.ToTable("ApiClientClaims", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiClientKeys", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("GuestId");

                    b.ToTable("ContactLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuestId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InternalRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TuroUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GuestId");

                    b.ToTable("Guests", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Memo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Memos", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChargeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIncurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TripId")
                        .HasColumnType("integer");

                    b.HasKey("ChargeId");

                    b.HasIndex("GuestId");

                    b.ToTable("OutstandingCharges", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TechLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TechLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripId"));

                    b.Property<bool>("DamageReported")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Earnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<bool>("LateReturn")
                        .HasColumnType("boolean");

                    b.Property<int>("MilesDriven")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TollFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("TripId");

                    b.HasIndex("GuestId");

                    b.ToTable("Trips", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.IncidentReport", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReportedToTuro")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Incident");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata", t =>
                        {
                            t.Property("Cost")
                                .HasColumnName("MaintenanceEntry_Cost");
                        });

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.RepairEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ComponentAffected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.HasOne("KwestKarz.Entities.ApiClientKey", "ApiClientKey")
                        .WithMany("Claims")
                        .HasForeignKey("ApiClientKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiClientKey");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("ContactLogs")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("OutstandingCharges")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("Trips")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Navigation("ContactLogs");

                    b.Navigation("OutstandingCharges");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250605144537_adding account creation sustem.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace KwestKarz.Migrations
{
    /// <inheritdoc />
    public partial class addingaccountcreationsustem : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "FirstName",
                schema: "kwestkarzbusinessdata",
                table: "UserAccounts",
                type: "character varying(100)",
                maxLength: 100,
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "LastName",
                schema: "kwestkarzbusinessdata",
                table: "UserAccounts",
                type: "character varying(100)",
                maxLength: 100,
                nullable: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "FirstName",
                schema: "kwestkarzbusinessdata",
                table: "UserAccounts");

            migrationBuilder.DropColumn(
                name: "LastName",
                schema: "kwestkarzbusinessdata",
                table: "UserAccounts");
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\20250605144537_adding account creation sustem.Designer.cs
// <auto-generated />
using System;
using System.Collections.Generic;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    [Migration("20250605144537_adding account creation sustem")]
    partial class addingaccountcreationsustem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiClientKeyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiClientKeyId");

                    b.ToTable("ApiClientClaims", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiClientKeys", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("GuestId");

                    b.ToTable("ContactLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuestId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InternalRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TuroUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GuestId");

                    b.ToTable("Guests", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Memo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Memos", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChargeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIncurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TripId")
                        .HasColumnType("integer");

                    b.HasKey("ChargeId");

                    b.HasIndex("GuestId");

                    b.ToTable("OutstandingCharges", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TechLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TechLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripId"));

                    b.Property<bool>("DamageReported")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Earnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<bool>("LateReturn")
                        .HasColumnType("boolean");

                    b.Property<int>("MilesDriven")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TollFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("TripId");

                    b.HasIndex("GuestId");

                    b.ToTable("Trips", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.IncidentReport", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReportedToTuro")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Incident");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata", t =>
                        {
                            t.Property("Cost")
                                .HasColumnName("MaintenanceEntry_Cost");
                        });

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.RepairEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ComponentAffected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.HasOne("KwestKarz.Entities.ApiClientKey", "ApiClientKey")
                        .WithMany("Claims")
                        .HasForeignKey("ApiClientKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiClientKey");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("ContactLogs")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("OutstandingCharges")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("Trips")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Navigation("ContactLogs");

                    b.Navigation("OutstandingCharges");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Migrations\KwestKarzDbContextModelSnapshot.cs
// <auto-generated />
using System;
using System.Collections.Generic;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwestKarz.Migrations
{
    [DbContext(typeof(KwestKarzDbContext))]
    partial class KwestKarzDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kwestkarzbusinessdata")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiClientKeyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiClientKeyId");

                    b.ToTable("ApiClientClaims", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiClientKeys", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("GuestId");

                    b.ToTable("ContactLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuestId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InternalRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TuroUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GuestId");

                    b.ToTable("Guests", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Memo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Memos", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChargeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIncurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TripId")
                        .HasColumnType("integer");

                    b.HasKey("ChargeId");

                    b.HasIndex("GuestId");

                    b.ToTable("OutstandingCharges", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TechLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TechLogs", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripId"));

                    b.Property<bool>("DamageReported")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Earnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<bool>("LateReturn")
                        .HasColumnType("boolean");

                    b.Property<int>("MilesDriven")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TollFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("TripId");

                    b.HasIndex("GuestId");

                    b.ToTable("Trips", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.TripEarnings", b =>
                {
                    b.Property<string>("ReservationID")
                        .HasColumnType("text");

                    b.Property<string>("Guest")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("text");

                    b.Property<string>("RowHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripStatus")
                        .HasColumnType("text");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text");

                    b.HasKey("ReservationID");

                    b.ToTable("TripEarnings", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRoles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaintCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "kwestkarzbusinessdata");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata");

                    b.HasDiscriminator<string>("EventType").HasValue("VehicleEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.IncidentReport", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReportedToTuro")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Incident");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.InspectionEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.MaintenanceEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("VehicleEvents", "kwestkarzbusinessdata", t =>
                        {
                            t.Property("Cost")
                                .HasColumnName("MaintenanceEntry_Cost");
                        });

                    b.HasDiscriminator().HasValue("Maintenance");
                });

            modelBuilder.Entity("KwestKarz.Entities.Maintenance.RepairEntry", b =>
                {
                    b.HasBaseType("KwestKarz.Entities.VehicleEvent");

                    b.Property<string>("ComponentAffected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientClaim", b =>
                {
                    b.HasOne("KwestKarz.Entities.ApiClientKey", "ApiClientKey")
                        .WithMany("Claims")
                        .HasForeignKey("ApiClientKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiClientKey");
                });

            modelBuilder.Entity("KwestKarz.Entities.ContactLog", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("ContactLogs")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.OutstandingCharge", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("OutstandingCharges")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.Trip", b =>
                {
                    b.HasOne("KwestKarz.Entities.Guest", "Guest")
                        .WithMany("Trips")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserRole", b =>
                {
                    b.HasOne("KwestKarz.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwestKarz.Entities.UserAccount", "UserAccount")
                        .WithMany("Roles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("KwestKarz.Entities.VehicleEvent", b =>
                {
                    b.HasOne("KwestKarz.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KwestKarz.Entities.ApiClientKey", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("KwestKarz.Entities.Guest", b =>
                {
                    b.Navigation("ContactLogs");

                    b.Navigation("OutstandingCharges");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("KwestKarz.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KwestKarz.Entities.UserAccount", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\obj\Debug\net8.0\KwestKarz.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute("89d815d3-af27-42b5-ab70-bd226f43922d")]
[assembly: System.Reflection.AssemblyCompanyAttribute("KwestKarz")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b2cbb2e3d30d33799924684318d778a413490e05")]
[assembly: System.Reflection.AssemblyProductAttribute("KwestKarz")]
[assembly: System.Reflection.AssemblyTitleAttribute("KwestKarz")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.



// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\obj\Debug\net8.0\KwestKarz.GlobalUsings.g.cs
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\obj\Debug\net8.0\KwestKarz.MvcApplicationPartsAssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Generated by the MSBuild WriteCodeFragment class.



// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\AccountService.cs
using System;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using KwestKarz.Entities;
using BCrypt.Net;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;
using Microsoft.AspNetCore.Identity;

namespace KwestKarz.Services
{
    public class AccountService : IAccountService
    {
        private readonly KwestKarzDbContext _dbContext;
        private readonly ITokenService _tokenService;
        private readonly IEmailService _emailService;
        private readonly IPasswordHasher<UserAccount> _passwordHasher;
        private readonly string _baseUrl;

        public AccountService(
            KwestKarzDbContext dbContext,
            ITokenService tokenService,
            IEmailService emailService,
            IPasswordHasher<UserAccount> passwordHasher,
            IConfiguration config)
        {
            _dbContext = dbContext;
            _tokenService = tokenService;
            _emailService = emailService;
            _passwordHasher = passwordHasher;
            _baseUrl = config["BaseUrl"];
        }


        public async Task<List<UserAccount>> GetAllAccounts()
        {
            return await _dbContext.UserAccounts.ToListAsync();    
        }

        public async Task<UserAccount> CreateAccountAsync(string email, string username, string password)
        {
            var existing = await _dbContext.UserAccounts.FirstOrDefaultAsync(u => u.Email == email);
            if (existing != null)
                throw new InvalidOperationException("Account already exists with this email.");

            var account = new UserAccount
            {
                Id = Guid.NewGuid(),
                Email = email,
                Username = username,
                PasswordHash = BCrypt.Net.BCrypt.HashPassword(password),
                IsActive = false // Locked until verified and approved
            };

            _dbContext.UserAccounts.Add(account);
            await _dbContext.SaveChangesAsync();
            return account;
        }

        public async Task InviteUserAsync(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
                throw new ArgumentException("Email is required.", nameof(email));

            var user = await _dbContext.UserAccounts.FirstOrDefaultAsync(u => u.Email == email);
            if (user == null)
            {
                user = new UserAccount
                {
                    Id = Guid.NewGuid(),
                    Email = email,
                    Username = email,
                    IsActive = true,
                    RequiresPasswordReset = true,
                    PasswordHash = string.Empty
                };
                _dbContext.UserAccounts.Add(user);
                await _dbContext.SaveChangesAsync();
            }

            var token = _tokenService.GenerateAccountSetupToken(user.Email);
            var setupLink = $"{_baseUrl}/setup-account?token={token}";

            await _emailService.SendEmailAsync(user.Email, "Complete Your Kwest Karz Account Setup",
                $"Click here to complete your setup: {setupLink}");
        }


        public async Task<UserAccount> GetAccountByIdAsync(Guid id)
        {
            return await _dbContext.UserAccounts.FirstOrDefaultAsync(u => u.Id == id);
        }

        public async Task<UserAccount> GetAccountByEmailAsync(string email)
        {
            return await _dbContext.UserAccounts.FirstOrDefaultAsync(u => u.Email == email);
        }

        public async Task DisableAccountAsync(Guid id)
        {
            var user = await GetAccountByIdAsync(id);
            if (user == null) throw new Exception("User not found.");

            user.IsActive = false;
            await _dbContext.SaveChangesAsync();
        }

        public async Task EnableAccountAsync(Guid id)
        {
            var user = await GetAccountByIdAsync(id);
            if (user == null) throw new Exception("User not found.");

            user.IsActive = true;
            await _dbContext.SaveChangesAsync();
        }

        public async Task UpdateAccountAsync(UserAccount updated)
        {
            var user = await GetAccountByIdAsync(updated.Id);
            if (user == null) throw new Exception("User not found.");

            user.Username = updated.Username;
            user.Email = updated.Email;
            await _dbContext.SaveChangesAsync();
        }

        public async Task CompleteAccountSetupAsync(string token, string password, string firstName, string lastName)
        {
            var principal = _tokenService.GetClaimsFromToken(token);
            if (principal == null)
                throw new SecurityTokenException("Invalid or expired token.");

            var purpose = principal.FindFirstValue("purpose");
            if (purpose != "account_setup")
                throw new SecurityTokenException("Invalid token purpose.");

            var email = principal.FindFirstValue(ClaimTypes.Email) ?? principal.FindFirstValue(ClaimTypes.Email);
            if (string.IsNullOrWhiteSpace(email))
                throw new SecurityTokenException("Email not found in token.");

            var user = await _dbContext.UserAccounts.FirstOrDefaultAsync(u => u.Email == email);
            if (user == null)
                throw new InvalidOperationException("User not found.");

            user.FirstName = firstName;
            user.LastName = lastName;
            user.PasswordHash = _passwordHasher.HashPassword(user, password);
            user.RequiresPasswordReset = false;

            await _dbContext.SaveChangesAsync();
        }


    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\ApiKeyService.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;

namespace KwestKarz.Services
{
    public class ApiKeyService : IApiKeyService
    {
        private readonly KwestKarzDbContext _db;

        public ApiKeyService(KwestKarzDbContext db)
        {
            _db = db;
        }

        public async Task<ApiClientKey> CreateKeyAsync(string name, string? description, IEnumerable<ApiClientRole> roles)
        {
            var rawKey = Guid.NewGuid().ToString("N") + Guid.NewGuid().ToString("N"); // 64-char token
            var hash = Hash(rawKey);

            var key = new ApiClientKey
            {
                Id = Guid.NewGuid(),
                Name = name,
                KeyHash = hash,
                Description = description,
                DateIssued = DateTime.UtcNow,
                IsActive = true,
                Claims = roles.Select(r => new ApiClientClaim { Role = r }).ToList()
            };

            _db.ApiClientKeys.Add(key);
            await _db.SaveChangesAsync();

            key.KeyHash = rawKey; // Return raw key in place of hash (not persisted)
            return key;
        }

        public async Task<List<ApiClientKey>> GetAllKeysAsync()
        {
            return await _db.ApiClientKeys
                .Include(k => k.Claims)
                .ToListAsync();
        }

        public async Task<ApiClientKey?> GetKeyByIdAsync(Guid id)
        {
            return await _db.ApiClientKeys
                .Include(k => k.Claims)
                .FirstOrDefaultAsync(k => k.Id == id);
        }

        public async Task<bool> DeactivateKeyAsync(Guid id)
        {
            var key = await _db.ApiClientKeys.FindAsync(id);
            if (key == null) return false;

            key.IsActive = false;
            await _db.SaveChangesAsync();
            return true;
        }

        public async Task<ApiClientKey?> ValidateKeyAsync(string rawKey)
        {
            var hash = Hash(rawKey);
            return await _db.ApiClientKeys
                .Include(k => k.Claims)
                .FirstOrDefaultAsync(k => k.KeyHash == hash && k.IsActive);
        }

        private static string Hash(string key)
        {
            using var sha256 = SHA256.Create();
            var bytes = Encoding.UTF8.GetBytes(key);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hash);
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\AuthService.cs
using Microsoft.EntityFrameworkCore;
using KwestKarz.Entities;
using System;
using System.Threading.Tasks;

namespace KwestKarz.Services
{
    /// <summary>
    /// Provides authentication services including user login and password changes.
    /// </summary>
    public class AuthService : IAuthService
    {
        private readonly KwestKarzDbContext _dbContext;
        private readonly ITokenService _tokenService;
        private readonly IEmailService _emailService;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthService"/> class.
        /// </summary>
        /// <param name="dbContext">The application's database context.</param>
        /// <param name="tokenService">Service used to generate JWT tokens.</param>
        /// <param name="emailService">Service used to send email notifications.</param>
        public AuthService(
            KwestKarzDbContext dbContext,
            ITokenService tokenService,
            IEmailService emailService)
        {
            _dbContext = dbContext;
            _tokenService = tokenService;
            _emailService = emailService;
        }

        /// <summary>
        /// Attempts to authenticate a user using their email or username and password.
        /// Sends an email notification on success or failure (for audit/debugging purposes).
        /// </summary>
        /// <param name="usernameOrEmail">The user's email address or username.</param>
        /// <param name="password">The user's plaintext password to verify.</param>
        /// <returns>
        /// A signed JWT token string if authentication succeeds.
        /// Throws <see cref="UnauthorizedAccessException"/> if credentials are invalid or the account is inactive.
        /// </returns>
        public async Task<string> LoginAsync(string usernameOrEmail, string password)
        {
            var timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

            var user = await _dbContext.UserAccounts
                .Include(u => u.Roles)
                .ThenInclude(ur => ur.Role)
                .FirstOrDefaultAsync(u =>
                    u.Email == usernameOrEmail ||
                    u.Username == usernameOrEmail);

            if (user == null || !user.IsActive)
            {
                await _emailService.SendEmailAsync(
                    "wwestlake@lagdaemon.com",
                    "Login Failed",
                    $"Login failed for: {usernameOrEmail} at {timestamp} (invalid or inactive)"
                );
                throw new UnauthorizedAccessException("Invalid credentials or inactive account.");
            }

            if (!BCrypt.Net.BCrypt.Verify(password, user.PasswordHash))
            {
                await _emailService.SendEmailAsync(
                    "wwestlake@lagdaemon.com",
                    "Login Failed",
                    $"Login failed for: {usernameOrEmail} at {timestamp} (bad password)"
                );
                throw new UnauthorizedAccessException("Invalid credentials.");
            }

            await _emailService.SendEmailAsync(
                "wwestlake@lagdaemon.com",
                "Login Success",
                $"User {user.Email} logged in at {timestamp}"
            );

            return await _tokenService.GenerateTokenAsync(user.Email);
        }

        /// <summary>
        /// Changes the password for a user after verifying their current password.
        /// </summary>
        /// <param name="email">The user's email address.</param>
        /// <param name="currentPassword">The current password to verify.</param>
        /// <param name="newPassword">The new password to set.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public async Task ChangePasswordAsync(string email, string currentPassword, string newPassword)
        {
            var user = await _dbContext.UserAccounts
                .FirstOrDefaultAsync(u => u.Email == email);

            if (user == null || !user.IsActive)
                throw new UnauthorizedAccessException("Invalid user or inactive account.");

            if (!BCrypt.Net.BCrypt.Verify(currentPassword, user.PasswordHash))
                throw new UnauthorizedAccessException("Current password is incorrect.");

            user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(newPassword);
            user.RequiresPasswordReset = false;

            await _dbContext.SaveChangesAsync();
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\CSVParserService.cs
using System.Globalization;
using CsvHelper;
using CsvHelper.Configuration;
using KwestKarz.Services;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace KwestKarz.Services
{
    public class CSVParserService : ICSVParserService
    {
        public List<T> ParseCsv<T>(Stream csvStream) where T : class, new()
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HeaderValidated = null,
                MissingFieldFound = null,
                TrimOptions = TrimOptions.Trim,
                PrepareHeaderForMatch = args => args.Header
            };

            using var reader = new StreamReader(csvStream);
            using var csv = new CsvReader(reader, config);

            var records = csv.GetRecords<T>().ToList();
            return records;
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\DbSeeder.cs
using KwestKarz.Entities;

namespace KwestKarz.Services
{
    public static class DbSeeder
    {
        public static void SeedRoles(KwestKarzDbContext dbContext)
        {
            var requiredRoles = new[] { "Admin", "Employee", "Maintenance", "Owner", "Driver" };

            foreach (var roleName in requiredRoles)
            {
                if (!dbContext.Roles.Any(r => r.Name == roleName))
                {
                    dbContext.Roles.Add(new Role { Id = Guid.NewGuid(), Name = roleName });
                }
            }

            dbContext.SaveChanges();
        }


        public static void SeedAdminUser(KwestKarzDbContext dbContext)
        {
            var adminEmail = "admin@kwestkarz.local";

            if (!dbContext.UserAccounts.Any(u => u.Email == adminEmail))
            {
                var adminRole = dbContext.Roles.First(r => r.Name == "Admin");

                var user = new UserAccount
                {
                    Id = Guid.NewGuid(),
                    Email = adminEmail,
                    Username = "admin",
                    PasswordHash = BCrypt.Net.BCrypt.HashPassword("password"),
                    IsActive = true,
                    RequiresPasswordReset = true,
                    Roles = new List<UserRole>
                {
                    new UserRole
                    {
                        Id = Guid.NewGuid(),
                        RoleId = adminRole.Id
                    }
                }
                };

                dbContext.UserAccounts.Add(user);
                dbContext.SaveChanges();
            }
        }

    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\EmailService.cs
using System.Threading.Tasks;
using MailKit.Net.Smtp;
using MailKit.Security;
using Microsoft.Extensions.Options;
using MimeKit;
using KwestKarz.Services.Configuration;
using KwestKarz.Entities;

namespace KwestKarz.Services
{

    public class EmailService : IEmailService
    {
        private readonly GoogleEmailSettings _settings;
        private readonly ILogService _logService;

        public EmailService(IOptions<GoogleEmailSettings> options, ILogService logService)
        {
            _settings = options.Value;
            _logService = logService;
        }

        public async Task SendEmailAsync(string to, string subject, string body)
        {
            if (string.IsNullOrWhiteSpace(body))
            {
                await _logService.LogAsync(TechLogLevel.Warning, "Attempted to send email with empty body.", detail: $"To={to}, Subject={subject}");
                throw new ArgumentException("Email body is null or empty", nameof(body));
            }

            try
            {
                var message = new MimeMessage();
                message.From.Add(MailboxAddress.Parse(_settings.Email));
                message.To.Add(MailboxAddress.Parse(to));
                message.Subject = subject;
                message.Body = new TextPart("plain") { Text = body };

                using var client = new SmtpClient();
                await client.ConnectAsync("smtp.gmail.com", 587, SecureSocketOptions.StartTls);
                await client.AuthenticateAsync(_settings.Email, _settings.Password);
                await client.SendAsync(message);
                await client.DisconnectAsync(true);

                await _logService.LogAsync(TechLogLevel.Information, "Email sent successfully.", detail: $"To={to}, Subject={subject}");
            }
            catch (Exception ex)
            {
                await _logService.LogAsync(TechLogLevel.Error, "Failed to send email.", ex.ToString());
                throw;
            }
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\GuestService.cs
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace KwestKarz.Services
{
    public class GuestService : IGuestService
    {
        private readonly KwestKarzDbContext _db;

        public GuestService(KwestKarzDbContext dbContext)
        {
            _db = dbContext;
        }

        public async Task<Guest> GetGuestByIdAsync(int id)
        {
            return await _db.Guests
                .Include(g => g.Trips)
                .Include(g => g.ContactLogs)
                .Include(g => g.OutstandingCharges)
                .FirstOrDefaultAsync(g => g.GuestId == id);
        }

        public async Task<Guest> GetGuestByEmailAsync(string email)
        {
            return await _db.Guests
                .Include(g => g.Trips)
                .Include(g => g.ContactLogs)
                .Include(g => g.OutstandingCharges)
                .FirstOrDefaultAsync(g => g.Email == email);
        }

        public async Task<Guest> GetOrCreateGuestAsync(Guest guestInput)
        {
            var existing = await _db.Guests.FirstOrDefaultAsync(g => g.Email == guestInput.Email);
            if (existing != null) return existing;

            _db.Guests.Add(guestInput);
            await _db.SaveChangesAsync();
            return guestInput;
        }

        public async Task AddTripToGuestAsync(int guestId, Trip trip)
        {
            var guest = await _db.Guests.FindAsync(guestId);
            if (guest == null) throw new Exception("Guest not found");

            trip.GuestId = guestId;
            _db.Trips.Add(trip);
            await _db.SaveChangesAsync();
        }

        public async Task AddContactLogAsync(int guestId, ContactLog log)
        {
            var guest = await _db.Guests.FindAsync(guestId);
            if (guest == null) throw new Exception("Guest not found");

            log.GuestId = guestId;
            log.Timestamp = DateTime.UtcNow;
            _db.ContactLogs.Add(log);
            await _db.SaveChangesAsync();
        }

        public async Task AddOutstandingChargeAsync(int guestId, OutstandingCharge charge)
        {
            var guest = await _db.Guests.FindAsync(guestId);
            if (guest == null) throw new Exception("Guest not found");

            charge.GuestId = guestId;
            charge.DateIncurred = DateTime.UtcNow;
            _db.OutstandingCharges.Add(charge);
            await _db.SaveChangesAsync();
        }

        public async Task UpdateGuestAsync(Guest updatedGuest)
        {
            var guest = await _db.Guests.FindAsync(updatedGuest.GuestId);
            if (guest == null) throw new Exception("Guest not found");

            guest.FullName = updatedGuest.FullName;
            guest.Email = updatedGuest.Email;
            guest.Phone = updatedGuest.Phone;
            guest.TuroUsername = updatedGuest.TuroUsername;
            guest.InternalRating = updatedGuest.InternalRating;
            guest.IsVIP = updatedGuest.IsVIP;

            await _db.SaveChangesAsync();
        }

        public async Task DeleteGuestAsync(int guestId)
        {
            var guest = await _db.Guests.FindAsync(guestId);
            if (guest == null) return;

            _db.Guests.Remove(guest);
            await _db.SaveChangesAsync();
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IAccountService.cs
using KwestKarz.Entities;
using System;

namespace KwestKarz.Services
{
    public interface IAccountService
    {
        Task<UserAccount> CreateAccountAsync(string email, string username, string password);
        Task<List<UserAccount>> GetAllAccounts();
        Task DisableAccountAsync(Guid id);
        Task EnableAccountAsync(Guid id);
        Task<UserAccount> GetAccountByEmailAsync(string email);
        Task<UserAccount> GetAccountByIdAsync(Guid id);
        Task UpdateAccountAsync(UserAccount updated);
        Task InviteUserAsync(string email);
        Task CompleteAccountSetupAsync(string token, string password, string firstName, string lastName);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IApiKeyService.cs
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using KwestKarz.Entities;

namespace KwestKarz.Services
{
    public interface IApiKeyService
    {
        Task<ApiClientKey> CreateKeyAsync(string name, string? description, IEnumerable<ApiClientRole> roles);
        Task<List<ApiClientKey>> GetAllKeysAsync();
        Task<ApiClientKey?> GetKeyByIdAsync(Guid id);
        Task<bool> DeactivateKeyAsync(Guid id);
        Task<ApiClientKey?> ValidateKeyAsync(string rawKey);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IAuthService.cs
using System;
using System.Linq;

namespace KwestKarz.Services
{
    public interface IAuthService
    {
        Task<string> LoginAsync(string usernameOrEmail, string password);
        Task ChangePasswordAsync(string email, string currentPassword, string newPassword);

    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\ICSVParserService.cs
using System;
using System.Linq;

namespace KwestKarz.Services
{
    public interface ICSVParserService
    {
        List<T> ParseCsv<T>(Stream csvStream) where T : class, new();
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IEmailService.cs
namespace KwestKarz.Services
{
    public interface IEmailService
    {
        Task SendEmailAsync(string to, string subject, string body);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IGuestService.cs
using KwestKarz.Entities;
using System;
using System.Linq;

namespace KwestKarz.Services
{
    public interface IGuestService
    {
        Task AddContactLogAsync(int guestId, ContactLog log);
        Task AddOutstandingChargeAsync(int guestId, OutstandingCharge charge);
        Task AddTripToGuestAsync(int guestId, Trip trip);
        Task DeleteGuestAsync(int guestId);
        Task<Guest> GetGuestByEmailAsync(string email);
        Task<Guest> GetGuestByIdAsync(int id);
        Task<Guest> GetOrCreateGuestAsync(Guest guestInput);
        Task UpdateGuestAsync(Guest updatedGuest);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\ILogService.cs
using KwestKarz.Entities;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace KwestKarz.Services
{
    public interface ILogService
    {
        Task LogAsync(
            TechLogLevel level,
            string message,
            string? detail = null,
            string? overrideSource = null,
            [CallerFilePath] string callerFile = ""
        );
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IMemoService.cs
using System.Collections.Generic;
using System.Threading.Tasks;
using KwestKarz.Entities;

namespace KwestKarz.Services
{
    public interface IMemoService
    {
        Task<Memo> CreateMemoAsync(Memo memo);
        Task<List<Memo>> GetUpcomingAsync();
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\ITokenService.cs
using System;
using System.Linq;
using System.Security.Claims;

namespace KwestKarz.Services
{
    public interface ITokenService
    {
        Task<string> GenerateTokenAsync(string email);
        string GenerateAccountSetupToken(string email);
        ClaimsPrincipal GetClaimsFromToken(string token);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\ITripEarningsService.cs
using System;
using System.Linq;

namespace KwestKarz.Services
{
    public interface ITripEarningsService
    {
        int ImportTripEarnings(Stream csvStream);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IVehicleEventService.cs
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using KwestKarz.Entities;

namespace KwestKarz.Services
{
    public interface IVehicleEventService
    {
        Task<List<VehicleEvent>> GetEventsForVehicleAsync(Guid vehicleId);
        Task<VehicleEvent> GetEventByIdAsync(Guid id);
        Task<T> GetEventByIdAsync<T>(Guid id) where T : VehicleEvent;
        Task AddEventAsync(VehicleEvent vehicleEvent);
        Task DeleteEventAsync(Guid id);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IVehicleImportService.cs
using System;

namespace KwestKarz.Services
{
    public interface IVehicleImportService
    {
        Task<int> ImportVehiclesAsync(Stream csvStream);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\IVehicleService.cs
using KwestKarz.Entities;

namespace KwestKarz.Services
{
    public interface IVehicleService
    {
        Task<Vehicle> CreateAsync(Vehicle vehicle);
        Task DeleteAsync(Guid id);
        Task<List<Vehicle>> GetAllAsync();
        Task<Vehicle> GetByIdAsync(Guid id);
        Task<Vehicle> UpdateAsync(Vehicle vehicle);
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\LogEntryService.cs
using System;
using System.Collections.Generic;
using System.Linq;
using KwestKarz.Entities;

namespace KwestKarz.Services
{
    public class LogEntryService
    {
        private readonly List<LogEntry> _logStore;

        public LogEntryService()
        {
            _logStore = new List<LogEntry>();
        }

        public LogEntry CreateLog(string account, string category, string action, string result, string type)
        {
            var previous = _logStore.LastOrDefault();

            var log = new LogEntry
            {
                Account = account,
                Category = category,
                Action = action,
                Result = result,
                Type = type,
                Timestamp = DateTime.UtcNow
            };

            log.ComputeHash(previous?.Hash);
            _logStore.Add(log);
            return log;
        }

        public IEnumerable<LogEntry> GetLogsForAccount(string account)
        {
            return _logStore.Where(log => log.Account == account).OrderBy(log => log.Timestamp);
        }

        public TimeSpan CalculateTimeOnTask(string account, string category)
        {
            var logs = GetLogsForAccount(account).Where(l => l.Category == category).ToList();
            if (logs.Count < 2) return TimeSpan.Zero;

            // Pair start/stop events or estimate from earliest to latest
            var first = logs.First().Timestamp;
            var last = logs.Last().Timestamp;
            return last - first;
        }

        public bool ValidateChain()
        {
            string lastHash = null;
            foreach (var entry in _logStore)
            {
                if (!entry.ValidateHash() || entry.PreviousHash != lastHash)
                    return false;
                lastHash = entry.Hash;
            }
            return true;
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\LogService.cs
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;

namespace KwestKarz.Services
{
    public class LogService : ILogService
    {
        private readonly KwestKarzDbContext _db;

        public LogService(KwestKarzDbContext db)
        {
            _db = db;
        }

        public async Task LogAsync(
            TechLogLevel level,
            string message,
            string? detail = null,
            string? overrideSource = null,
            string callerFile = ""
        )
        {
            var source = !string.IsNullOrWhiteSpace(overrideSource)
                ? overrideSource
                : Path.GetFileNameWithoutExtension(callerFile);

            var log = new TechLog
            {
                Timestamp = DateTime.UtcNow,
                Level = level,
                Source = source,
                Message = message,
                Detail = detail
            };

            _db.TechLogs.Add(log);
            await _db.SaveChangesAsync();
        }

    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\MemoService.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;

namespace KwestKarz.Services
{
    public class MemoService : IMemoService
    {
        private readonly KwestKarzDbContext _db;

        public MemoService(KwestKarzDbContext db)
        {
            _db = db;
        }

        public async Task<Memo> CreateMemoAsync(Memo memo)
        {
            _db.Memos.Add(memo);
            await _db.SaveChangesAsync();
            return memo;
        }

        public async Task<List<Memo>> GetUpcomingAsync()
        {
            var now = DateTime.UtcNow;
            return await _db.Memos
                .Where(m => m.Timestamp != null && m.Timestamp > now)
                .OrderBy(m => m.Timestamp)
                .ToListAsync();
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\TokenGenerator.cs
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;

namespace KwestKarz.Services
{
    public static class TokenGenerator
    {
        /// <summary>
        /// Generates a JSON Web Token (JWT) string for the specified user identity and claims.
        /// </summary>
        /// <param name="userId">The unique identifier of the user (used as the subject claim).</param>
        /// <param name="email">The user's email address (used as the email claim).</param>
        /// <param name="claims">A collection of additional claims to include in the token.</param>
        /// <param name="secretKey">The symmetric secret key used to sign the token.</param>
        /// <param name="issuer">The issuer of the token (typically the issuing authority or application name).</param>
        /// <param name="audience">The intended audience of the token.</param>
        /// <param name="expiresIn">The duration until the token expires.</param>
        /// <returns>A signed JWT string containing the provided claims and identity information.</returns>
        public static string GenerateJwtToken(
            string userId,
            string email,
            IEnumerable<Claim> claims,
            string secretKey,
            string issuer,
            string audience,
            TimeSpan expiresIn)
        {
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var allClaims = new List<Claim>(claims)
        {
            new Claim(JwtRegisteredClaimNames.Sub, userId),
            new Claim(JwtRegisteredClaimNames.Email, email),
            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
        };

            var expriration = DateTime.UtcNow.Add(expiresIn);

            var token = new JwtSecurityToken(
                issuer: issuer,
                audience: audience,
                claims: allClaims,
                expires: expriration,
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\TokenService.cs
using System;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using KwestKarz.Entities;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Text;

namespace KwestKarz.Services
{
    public class TokenService : ITokenService
    {
        private readonly KwestKarzDbContext _dbContext;
        private readonly IConfiguration _configuration;

        public TokenService(KwestKarzDbContext dbContext, IConfiguration configuration)
        {
            _dbContext = dbContext;
            _configuration = configuration;
        }

        public async Task<string> GenerateTokenAsync(string email)
        {
            var user = await _dbContext.UserAccounts
                .Include(u => u.Roles)
                .ThenInclude(ur => ur.Role)
                .FirstOrDefaultAsync(u => u.Email == email);

            if (user == null)
                throw new Exception("User not found");


            var claims = user.Roles
                .Select(ur => new Claim(ClaimTypes.Role, ur.Role.Name))
                .ToList();

            if (user.RequiresPasswordReset)
            {
                claims.Add(new Claim("requiresPasswordReset", "true"));
            }


            var secretKey = _configuration["Jwt:SecretKey"];
            var issuer = _configuration["Jwt:Issuer"];
            var audience = _configuration["Jwt:Audience"];
            var expiresIn = TimeSpan.FromHours(1);

            return TokenGenerator.GenerateJwtToken(
                user.Id.ToString(),
                user.Email,
                claims,
                secretKey,
                issuer,
                audience,
                expiresIn);
        }

        public string GenerateAccountSetupToken(string email)
        {
            var expiryHours = _configuration.GetValue<int>("AccountSetup:TokenExpiryHours");

            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, email),
                new Claim("purpose", "account_setup")
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:SecretKey"]));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
            var expires = DateTime.UtcNow.AddHours(expiryHours);

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims: claims,
                expires: expires,
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }

        public ClaimsPrincipal GetClaimsFromToken(string token)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.UTF8.GetBytes(_configuration["Jwt:SecretKey"]);

            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = _configuration["Jwt:Issuer"],
                ValidateAudience = true,
                ValidAudience = _configuration["Jwt:Audience"],
                ValidateLifetime = true,
                ClockSkew = TimeSpan.FromMinutes(5)
            };

            try
            {
                var principal = tokenHandler.ValidateToken(token, validationParameters, out var validatedToken);
                return principal;
            }
            catch
            {
                return null;
            }
        }

    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\TripEarningsService.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using KwestKarz.Entities;

namespace KwestKarz.Services
{
    public class TripEarningsService : ITripEarningsService
    {
        private readonly KwestKarzDbContext _dbContext;
        private readonly ICSVParserService _csvParserService;

        public TripEarningsService(KwestKarzDbContext dbContext, ICSVParserService csvParserService)
        {
            _dbContext = dbContext;
            _csvParserService = csvParserService;
        }

        public int ImportTripEarnings(Stream csvStream)
        {
            var records = _csvParserService.ParseCsv<TripEarnings>(csvStream);

            foreach (var record in records)
            {
                var raw = JsonSerializer.Serialize(record);
                using var sha256 = SHA256.Create();
                var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(raw));
                record.RowHash = Convert.ToHexString(hashBytes);
            }

            var newHashes = records.Select(r => r.RowHash).ToHashSet();

            var existingHashes = _dbContext.TripEarnings
                .Where(te => newHashes.Contains(te.RowHash))
                .Select(te => te.RowHash)
                .ToHashSet();

            var uniqueRecords = records
                .Where(r => !existingHashes.Contains(r.RowHash))
                .ToList();

            if (uniqueRecords.Any())
            {
                _dbContext.TripEarnings.AddRange(uniqueRecords);
                _dbContext.SaveChanges();
            }

            return uniqueRecords.Count;
        }

        private string ComputeHash(TripEarnings entry)
        {
            using var sha = SHA256.Create();
            var input = $"{entry.ReservationID}|{entry.TripStart:o}|{entry.Vehicle}|{entry.TotalEarnings}";
            var bytes = Encoding.UTF8.GetBytes(input);
            var hash = sha.ComputeHash(bytes);
            return Convert.ToHexString(hash);
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\VehicleEventService.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;

namespace KwestKarz.Services
{
    public class VehicleEventService : IVehicleEventService
    {
        private readonly KwestKarzDbContext _dbContext;

        public VehicleEventService(KwestKarzDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public async Task<List<VehicleEvent>> GetEventsForVehicleAsync(Guid vehicleId)
        {
            return await _dbContext.VehicleEvents
                .Where(e => e.VehicleId == vehicleId)
                .OrderByDescending(e => e.Date)
                .ToListAsync();
        }

        public async Task<VehicleEvent> GetEventByIdAsync(Guid id)
        {
            return await _dbContext.VehicleEvents.FirstOrDefaultAsync(e => e.Id == id);
        }

        public async Task<T> GetEventByIdAsync<T>(Guid id) where T : VehicleEvent
        {
            return await _dbContext.VehicleEvents
                .OfType<T>()
                .FirstOrDefaultAsync(e => e.Id == id);
        }

        public async Task AddEventAsync(VehicleEvent vehicleEvent)
        {
            _dbContext.VehicleEvents.Add(vehicleEvent);
            await _dbContext.SaveChangesAsync();
        }

        public async Task DeleteEventAsync(Guid id)
        {
            var ev = await _dbContext.VehicleEvents.FirstOrDefaultAsync(e => e.Id == id);
            if (ev != null)
            {
                _dbContext.VehicleEvents.Remove(ev);
                await _dbContext.SaveChangesAsync();
            }
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\VehicleImportService.cs
using KwestKarz.Entities;
using System;
using System.IO;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace KwestKarz.Services
{
    public class VehicleImportService : IVehicleImportService
    {
        private readonly KwestKarzDbContext _dbContext;
        private readonly ICSVParserService _csvParser;

        public VehicleImportService(KwestKarzDbContext dbContext, ICSVParserService csvParser)
        {
            _dbContext = dbContext;
            _csvParser = csvParser;
        }

        public async Task<int> ImportVehiclesAsync(Stream csvStream)
        {
            var records = _csvParser.ParseCsv<Vehicle>(csvStream);

            // Normalize VINs and remove duplicates against database
            var existingVins = await _dbContext.Vehicles
                .Select(v => v.VIN.ToUpper())
                .ToListAsync();

            var newVehicles = records
                .Where(v => !string.IsNullOrWhiteSpace(v.VIN))
                .Where(v => !existingVins.Contains(v.VIN.Trim().ToUpper()))
                .ToList();

            foreach (var vehicle in newVehicles)
            {
                vehicle.Id = Guid.NewGuid();

                if (vehicle.PurchaseDate.HasValue && vehicle.PurchaseDate.Value.Kind == DateTimeKind.Unspecified)
                {
                    vehicle.PurchaseDate = DateTime.SpecifyKind(vehicle.PurchaseDate.Value, DateTimeKind.Utc);
                }
            }

            _dbContext.Vehicles.AddRange(newVehicles);
            await _dbContext.SaveChangesAsync();

            return newVehicles.Count;
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\VehicleService.cs
using KwestKarz.Entities;
using Microsoft.EntityFrameworkCore;

namespace KwestKarz.Services
{
    public class VehicleService : IVehicleService
    {
        private readonly KwestKarzDbContext _dbContext;

        public VehicleService(KwestKarzDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public async Task<List<Vehicle>> GetAllAsync()
        {
            return await _dbContext.Vehicles.ToListAsync();
        }

        public async Task<Vehicle> GetByIdAsync(Guid id)
        {
            return await _dbContext.Vehicles.FindAsync(id);
        }

        public async Task<Vehicle> CreateAsync(Vehicle vehicle)
        {
            _dbContext.Vehicles.Add(vehicle);
            await _dbContext.SaveChangesAsync();
            return vehicle;
        }

        public async Task<Vehicle> UpdateAsync(Vehicle vehicle)
        {
            _dbContext.Vehicles.Update(vehicle);
            await _dbContext.SaveChangesAsync();
            return vehicle;
        }

        public async Task DeleteAsync(Guid id)
        {
            var vehicle = await _dbContext.Vehicles.FindAsync(id);
            if (vehicle != null)
            {
                _dbContext.Vehicles.Remove(vehicle);
                await _dbContext.SaveChangesAsync();
            }
        }
    }
}


// D:\01-Turo-Car-Rental-Business\Projects\KwestKarz\Kwestkarz-API\KwestKarz\Services\Configuration\GoogleEmailSettings.cs
namespace KwestKarz.Services.Configuration
{
    public class GoogleEmailSettings
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}


